/* Autogenerated by the RSIS Framework */
#include "{{HEADER_FILE}}"
#include "{{MODEL_FILE}}"
#include <nlohmann/json.hpp>
#include <cstring>

using nlohmann::json;
typedef std::vector<uint8_t> bytes;

{{CLASS_DEFINITIONS}}
{{SERIALIZATION}}
{{DESERIALIZATION}}

uint32_t handle_msg_get(const {{NAME}}& interface, BufferStruct id, SizeCallback cb) {
    bool error = false;
    std::vector<uint32_t> indices = std::vector<uint32_t>((uint32_t*)id.ptr, (uint32_t*)id.ptr + id.size);
    std::vector<uint32_t>::iterator begin = indices.begin();
    std::vector<uint32_t>::iterator end   = indices.end();
    bytes data = s_{{NAME}}(interface, begin, end, error);
    if (error) {
        return 1;
    }
    uint8_t* ptr = cb(data.size());
    // copy data
    memcpy(ptr, data.data(), data.size());
    return 0;
}

uint32_t handle_msg_set({{NAME}}& interface, BufferStruct id, BufferStruct data){
    std::vector<uint32_t> indices = std::vector<uint32_t>((uint32_t*)id.ptr, (uint32_t*)id.ptr + id.size);
    bytes buf = bytes(data.ptr, data.ptr + data.size); // not sure how not to copy here
    std::vector<uint32_t>::iterator begin = indices.begin();
    std::vector<uint32_t>::iterator end   = indices.end();
    if (d_{{NAME}}(interface, begin, buf, end)) {
        return 0;
    }
    return 1;
}
