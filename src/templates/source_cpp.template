/* Autogenerated by the RSIS Framework */
#include "{{HEADER_FILE}}"
#include "{{MODEL_FILE}}"
#include <nlohmann/json.hpp>
#include <cstring>
#include <optional>

using nlohmann::json;
typedef std::vector<uint8_t> bytes;

namespace std {
    /**
     * Custom support for complex types
     */
    void to_json(json& j, const std::complex<float>& obj) {
        j = json { {"real", obj.real()}, {"imag", obj.imag()}};
    }
    void from_json(const json& j, std::complex<float>& obj) {
        float r,i;
        j.at("real").get_to(r);
        j.at("imag").get_to(i);
        obj.real(r); obj.imag(i);
    }
    void to_json(json& j, const std::complex<double>& obj) {
        j = json { {"real", obj.real()}, {"imag", obj.imag()}};
    }
    void from_json(const json& j, std::complex<double>& obj) {
        double r,i;
        j.at("real").get_to(r);
        j.at("imag").get_to(i);
        obj.real(r); obj.imag(i);
    }
}

{{CLASS_DEFINITIONS}}
{{SERIALIZATION}}
{{DESERIALIZATION}}
{{POINTER}}

uint32_t handle_msg_get(const {{NAME}}& interface, BufferStruct id, SizeCallback cb) {
    bool error = false;
    std::vector<uint32_t> indices = std::vector<uint32_t>((uint32_t*)id.ptr, (uint32_t*)id.ptr + id.size);
    std::vector<uint32_t>::iterator begin = indices.begin();
    std::vector<uint32_t>::iterator end   = indices.end();
    bytes data = s_{{NAME}}(interface, begin, end, error);
    if (error) {
        return 1;
    }
    uint8_t* ptr = cb(data.size());
    // copy data
    memcpy(ptr, data.data(), data.size());
    return 0;
}

uint32_t handle_msg_set({{NAME}}& interface, BufferStruct id, BufferStruct data) {
    std::vector<uint32_t> indices = std::vector<uint32_t>((uint32_t*)id.ptr, (uint32_t*)id.ptr + id.size);
    bytes buf = bytes(data.ptr, data.ptr + data.size); // not sure how not to copy here
    std::vector<uint32_t>::iterator begin = indices.begin();
    std::vector<uint32_t>::iterator end   = indices.end();
    if (d_{{NAME}}(interface, begin, buf, end)) {
        return 0;
    }
    return 1;
}

uint8_t* get_pointer({{NAME}}& interface, BufferStruct id) {
    std::vector<uint32_t> indices = std::vector<uint32_t>((uint32_t*)id.ptr, (uint32_t*)id.ptr + id.size);
    std::vector<uint32_t>::iterator begin = indices.begin();
    std::vector<uint32_t>::iterator end   = indices.end();
    auto opt = p_{{NAME}}(interface, begin, end);
    if (opt.has_value()) {
        return opt.value();
    } else {
        return nullptr;
    }
}