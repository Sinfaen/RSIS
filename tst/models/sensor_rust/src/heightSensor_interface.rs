// Autogenerated by the RSIS Framework

extern crate modellib;
extern crate libc;

use libc::c_void;
use std::ffi::CString;

use modellib::BaseModel;
use modellib::ReflectClass;
use modellib::ReflectMember;

#[repr(C)]
pub struct height_sensor_in {
    pub signal : f64,
}
#[repr(C)]
pub struct height_sensor_out {
    pub inrange : bool,
}
#[repr(C)]
pub struct height_sensor_data {
    pub measurement : f64,
}
#[repr(C)]
pub struct height_sensor_params {
    pub limits : [f64; 2],
    pub noise : f64,
}
#[repr(C)]
pub struct height_sensor {
    pub inputs : height_sensor_in,
    pub outputs : height_sensor_out,
    pub data : height_sensor_data,
    pub params : height_sensor_params,
}


impl height_sensor_in {
    pub fn new() -> height_sensor_in {
        height_sensor_in {
            signal : 1.0,
        }
    }
}
impl height_sensor_out {
    pub fn new() -> height_sensor_out {
        height_sensor_out {
            inrange : false,
        }
    }
}
impl height_sensor_data {
    pub fn new() -> height_sensor_data {
        height_sensor_data {
            measurement : 1.0,
        }
    }
}
impl height_sensor_params {
    pub fn new() -> height_sensor_params {
        height_sensor_params {
            limits : [0.1, 0.8],
            noise : 0.01,
        }
    }
}
impl height_sensor {
    pub fn new() -> height_sensor {
        height_sensor {
            inputs : height_sensor_in::new(),
            outputs : height_sensor_out::new(),
            data : height_sensor_data::new(),
            params : height_sensor_params::new(),
        }
    }
}


pub fn reflect_height_sensor_in(_cb1 : ReflectClass, _cb2 : ReflectMember) {
    let cl = CString::new("height_sensor_in").unwrap();
    _cb1(cl.as_ptr());
    let f_signal = CString::new("signal").unwrap();
    let d_signal = CString::new("Float64").unwrap();
    _cb2(cl.as_ptr(), f_signal.as_ptr(), d_signal.as_ptr(), offset_of!(height_sensor_in, signal));
}
pub fn reflect_height_sensor_out(_cb1 : ReflectClass, _cb2 : ReflectMember) {
    let cl = CString::new("height_sensor_out").unwrap();
    _cb1(cl.as_ptr());
    let f_inrange = CString::new("inrange").unwrap();
    let d_inrange = CString::new("Bool").unwrap();
    _cb2(cl.as_ptr(), f_inrange.as_ptr(), d_inrange.as_ptr(), offset_of!(height_sensor_out, inrange));
}
pub fn reflect_height_sensor_data(_cb1 : ReflectClass, _cb2 : ReflectMember) {
    let cl = CString::new("height_sensor_data").unwrap();
    _cb1(cl.as_ptr());
    let f_measurement = CString::new("measurement").unwrap();
    let d_measurement = CString::new("Float64").unwrap();
    _cb2(cl.as_ptr(), f_measurement.as_ptr(), d_measurement.as_ptr(), offset_of!(height_sensor_data, measurement));
}
pub fn reflect_height_sensor_params(_cb1 : ReflectClass, _cb2 : ReflectMember) {
    let cl = CString::new("height_sensor_params").unwrap();
    _cb1(cl.as_ptr());
    let f_limits = CString::new("limits").unwrap();
    let d_limits = CString::new("[Float64; 2]").unwrap();
    _cb2(cl.as_ptr(), f_limits.as_ptr(), d_limits.as_ptr(), offset_of!(height_sensor_params, limits));
    let f_noise = CString::new("noise").unwrap();
    let d_noise = CString::new("Float64").unwrap();
    _cb2(cl.as_ptr(), f_noise.as_ptr(), d_noise.as_ptr(), offset_of!(height_sensor_params, noise));
}
pub fn reflect_height_sensor(_cb1 : ReflectClass, _cb2 : ReflectMember) {
    let cl = CString::new("height_sensor").unwrap();
    _cb1(cl.as_ptr());
    let f_inputs = CString::new("inputs").unwrap();
    let d_inputs = CString::new("height_sensor_in").unwrap();
    _cb2(cl.as_ptr(), f_inputs.as_ptr(), d_inputs.as_ptr(), offset_of!(height_sensor, inputs));
    let f_outputs = CString::new("outputs").unwrap();
    let d_outputs = CString::new("height_sensor_out").unwrap();
    _cb2(cl.as_ptr(), f_outputs.as_ptr(), d_outputs.as_ptr(), offset_of!(height_sensor, outputs));
    let f_data = CString::new("data").unwrap();
    let d_data = CString::new("height_sensor_data").unwrap();
    _cb2(cl.as_ptr(), f_data.as_ptr(), d_data.as_ptr(), offset_of!(height_sensor, data));
    let f_params = CString::new("params").unwrap();
    let d_params = CString::new("height_sensor_params").unwrap();
    _cb2(cl.as_ptr(), f_params.as_ptr(), d_params.as_ptr(), offset_of!(height_sensor, params));
}
#[no_mangle]
pub extern "C" fn reflect(_cb1 : ReflectClass, _cb2 : ReflectMember) {
    reflect_height_sensor_in(_cb1, _cb2);
    reflect_height_sensor_out(_cb1, _cb2);
    reflect_height_sensor_data(_cb1, _cb2);
    reflect_height_sensor_params(_cb1, _cb2);
    reflect_height_sensor(_cb1, _cb2);
}


#[no_mangle]
pub extern "C" fn create_model() -> *mut c_void {
    let obj: Box<Box<dyn BaseModel>> = Box::new(Box::new(height_sensor::new()));
    Box::into_raw(obj) as *mut Box<dyn BaseModel> as *mut c_void
}
